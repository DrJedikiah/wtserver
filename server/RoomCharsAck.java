/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package wtserver.server;

import java.nio.ByteBuffer;
import java.util.Random;
import wtserver.Client;
import wtserver.GameServer;
import wtserver.client.ServerMsg;

/**
 *
 * @author MSI
 */
public class RoomCharsAck extends ServerMsg {
    private final short msgId = ServerMsg.CS_FD_CHARS_ACK;
    
    public RoomCharsAck()
    {
        size = 8;
        buffer = ByteBuffer.allocate(8192);
    }
    
    public byte [] getData(short seqNum, GameServer.Room room)
    {
        buffer.position(0);
        byte random = (byte) new Random().nextInt();
        addByte(random);
        addShort(msgId);
        addShort(seqNum);
        addShort((short)0);
        byte checksum = 0;
        addByte(checksum);

        addByte((byte) 0);
        addByte((byte) 1);
        addByte((byte) room.getRoomMaster());
        addShort(room.getRoomNumber());
        
        String title = room.getRoomTitle();
        addByte((byte) (title.length() * 2));
        addUnicodeString(title);
        addByte((byte) 0);
        addByte((byte) room.getMap()); //Map
        addByte((byte) room.getMode()); //Mode
        addShort((short)0); //unk1
        //addInteger(0x0000023B);
        addByte((byte) 0);
        addByte((byte) room.getWins());
        addByte((byte) 5);
        addByte((byte) 0);
        addByte((byte) 0);
        //addInteger(0x000005);
        addByte((byte) 0);
        addByte((byte) 0);
        addByte((byte) 0);
        addShort(room.getTime());
        addShort(room.getPoints());
        //addInteger(0x0064);
        addShort((short) 2);
        addShort((short) 0xC0);
        addByte((byte) room.getCapacity());
        addInteger(0);
        int nUsers = room.getNumberOfUsers();
        //addInteger(nUsers); // n Users
        addByte((byte) nUsers);
        System.out.println("nUsers " + nUsers);
        for(int i = 0; i < nUsers; i++)
        {
            addByte((byte)i);
            addInteger(0);
            Client c = room.getUsers().get(i);
            addByte((byte) c.getRoomTeam()); //team
            addByte((byte) c.getRoomTeamSlot()); //unk
            if(c.getRoomSlotStatus() > 0)
                addByte((byte) 1); //slot status
            else addByte((byte) 0);
            //addShort((short) 0x00000831);
            addShort(c.getSessionId());
            addShort((short) 0);
            addByte((byte) c.getUserLevel()); //level
            addInteger(0);
            addInteger(0);
            String loginName = c.getLoginName();//"abez01";
            String callSign = c.getLoginName();
            System.out.println("callSign " + callSign + "c.getRoomSlotStatus() " + c.getRoomSlotStatus());
            addByte((byte) loginName.length());
            addAsciiString(loginName);
            addByte((byte) (callSign.length() * 2));
            addUnicodeString(callSign);
            addShort((short) 0);
            addInteger(c.getIp());//addInteger(0x180F6356); //global ip
            addShort((short) c.getUdpPort()); //global port
            addInteger(c.getUdpIp());//addInteger(0x9501A8C0); //local ip
            addShort((short) c.getUdpPort()); //local port
            if(c.getRoomSlotStatus() == 0)
                addByte((byte) 1);
            else addByte(c.getRoomSlotStatus());
            addByte((byte) 0x04);
            addByte((byte) 0);
            addByte((byte) 0);
            addByte((byte) 0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            
            addInteger(0x000107D1);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addByte((byte) 0);
            addInteger(0x000207D1);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addByte((byte) 0);
            addInteger(0x000307D1);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addInteger(0);
            addByte((byte) 0);
            addShort((short) 0x7D1);
            addByte((byte) 2);
            addShort((short) 30006); //chars
            addShort((short) 30006);
            addByte((byte) 2);
            addShort((short) 30005); //chars
            addShort((short) 30005);
            addShort((short) 0);
            addByte((byte) 0x33);
            addByte((byte) 3);
            addShort((short) 0);
            addByte((byte) 0);
            addShort((short) 1);
            addByte((byte) 0);
            addShort((short) 2);
            addByte((byte) 0);
            //if (i + 1 < nUsers) {
            //}else addByte((byte) 0);
        }
            addByte((byte) 0x3D); //level
            addByte((byte) 0);
            addByte((byte) 0);
            addByte((byte) 0);
        /*
        byte unks[] = {0x00, 0x01, 0x00, 0x00, 0x00, 0x26, 0x4D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x65, 0x00, 0x20, 0x00, 0x69, 0x00, 0x74, 0x00, 0x21, 0x00, 0x00, 0x07, 0x02, 0x02, 0x04, 0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x02, 0x3C, 0x00, 0x02, 0x00, (byte)0xC0, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x31, 0x08, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x61, 0x66, 0x65, 0x7A, 0x30, 0x31, 0x12, 0x6A, 0x00, 0x68, 0x00, 0x67, 0x00, 0x36, 0x00, 0x79, 0x00, 0x65, 0x00, 0x67, 0x00, 0x66, 0x00, 0x64, 0x00, 0x00, 0x00, 0x56, 0x63, 0x0F, (byte)0x91, 0x70, 0x4D, (byte)0xC0, (byte)0xA8, 0x01, (byte)0x95, 0x70, 0x4D, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte)0xD1, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte)0xD1, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte)0xD1, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte)0xD1, 0x07, 0x02, 0x36, 0x75, 0x36, 0x75, 0x02, 0x35, 0x75, 0x35, 0x75, 0x00, 0x00};
        
        //byte unks[] = {0x00, 0x01, 0x00, 0x00, 0x00, 0x2E, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x67, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x77, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x66, 0x00, 0x20, 0x00, 0x68, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x00, 0x07, 0x02, 0x02, 0x04, 0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x02, 0x3C, 0x00, 0x02, 0x00, (byte)0xC0, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x33, 0x08, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x61, 0x66, 0x65, 0x7A, 0x30, 0x31, 0x12, 0x6A, 0x00, 0x68, 0x00, 0x67, 0x00, 0x36, 0x00, 0x79, 0x00, 0x65, 0x00, 0x67, 0x00, 0x66, 0x00, 0x64, 0x00, 0x00, 0x00, 0x56, 0x63, 0x0F, 0x18, 0x70, 0x4D, (byte)0xC0, (byte)0xA8, 0x01, (byte)0x95, 0x70, 0x4D, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte)0xD1, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte)0xD1, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte)0xD1, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte)0xD1, 0x07, 0x02, 0x36, 0x75, 0x36, 0x75, 0x02, 0x35, 0x75, 0x35, 0x75, 0x00, 0x00};
        for(int i = 0; i < unks.length; i++)
            addByte(unks[i]);
        addInteger(0);*/
        
        size = (short) buffer.position();
        if((size - 8) % 16 > 0)
        {
            size -= (size - 8) % 16;
            size += 16;
        }
        short pSize = (short) ((size - 8) / 16);
        buffer.position(5);
        addShort(pSize);
        for(int i = 0; i < 7; i++)
        {
            checksum += buffer.get(i);
        }
        addByte(checksum);
        return buffer.array();
    }
}
