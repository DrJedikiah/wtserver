/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package wtserver.server;

import java.nio.ByteBuffer;
import java.util.Random;
import wtserver.client.ServerMsg;
import wtserver.database.Users;

/**
 *
 * @author MSI
 */
public class EquipListAck extends ServerMsg {
    private final short msgId = ServerMsg.CS_IN_EQUIPLIST_ACK;
    
    public EquipListAck()
    {
        size = 8;
        buffer = ByteBuffer.allocate(512);
    }
    
    public byte [] getData(short seqNum, int usr_id)
    {
        buffer.position(0);
        byte random = (byte) new Random().nextInt();
        addByte(random);
        addShort(msgId);
        addShort(seqNum);
        addShort((short)0);
        byte checksum = 0;
        addByte(checksum);
        
        byte b[] = {0x00, 0x04, 
            0x00, 0x00, 
            0x1F, 0x61, (byte)0xC1, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x61, (byte)0xC1, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x61, (byte)0xC1, 0x0A, 0x00, 
            0x01, 0x00, 
            0x1F, 0x61, (byte)0xC1, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x61, (byte)0xC1, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x61, (byte)0xC1, 0x0A, 0x00, 
            0x02, 0x00, 
            0x1F, 0x61, (byte)0xC1, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x61, (byte)0xC1, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x61, (byte)0xC1, 0x0A, 0x00, 
            0x03, 0x00, 
            0x1F, 0x61, (byte)0xC1, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x61, (byte)0xC1, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x61, (byte)0xC1, 0x0A, 0x00, 
        };
        
        for(int i = 0; i < b.length; i++)
        {
            addByte(b[i]);
        }
        
        size = (short) buffer.position();
        
        Users users = new Users();
        int equipList [] = users.getEquipList(usr_id);
        
        for(int i = 0; i < 4; i++)
        {
            int index = i * 90;
            buffer.position(8 + 4 + index);
            int wp = i * 6;
            addInteger(equipList[wp]);
            buffer.position(8 + 4 + index + 10);
            addInteger(equipList[wp + 2]);
            buffer.position(8 + 4 + index + 15);
            addInteger(equipList[wp + 4]);
            buffer.position(8 + 4 + index + 19);
            addInteger(equipList[wp + 5]);
            buffer.position(8 + 4 + index + 83);
            addInteger(equipList[wp + 3]);
        }
       
        for(int i = 0; i < 5; i++)
        {
            int index = i * 4;
            buffer.position(8 + 4 + index + 23);
            addInteger(equipList[24 + i]);
        }
        
        if((size - 8) % 16 > 0)
        {
            size -= (size - 8) % 16;
            size += 16;
        }
        short pSize = (short) ((size - 8) / 16);
        buffer.position(5);
        addShort(pSize);
        for(int i = 0; i < 7; i++)
        {
            checksum += buffer.get(i);
        }
        addByte(checksum);
        return buffer.array();
    }
}